package com.zallek.collide.scene;

import java.io.IOException;

import org.andengine.engine.camera.hud.HUD;
import org.andengine.engine.handler.timer.ITimerCallback;
import org.andengine.engine.handler.timer.TimerHandler;
import org.andengine.entity.IEntity;
import org.andengine.entity.modifier.MoveModifier;
import org.andengine.entity.modifier.ScaleModifier;
import org.andengine.entity.scene.background.Background;
import org.andengine.entity.sprite.ButtonSprite;
import org.andengine.entity.sprite.ButtonSprite.OnClickListener;
import org.andengine.entity.text.Text;
import org.andengine.entity.text.CountText;
import org.andengine.entity.text.TextOptions;
import org.andengine.entity.text.CountText.CountTextOptions;
import org.andengine.extension.physics.box2d.PhysicsWorld;
import org.andengine.util.SAXUtils;
import org.andengine.util.adt.align.HorizontalAlign;
import org.andengine.util.adt.color.Color;
import org.andengine.util.level.EntityLoader;
import org.andengine.util.level.simple.SimpleLevelEntityLoaderData;
import org.andengine.util.level.simple.SimpleLevelLoader;
import org.xml.sax.Attributes;

import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Contact;
import com.badlogic.gdx.physics.box2d.ContactImpulse;
import com.badlogic.gdx.physics.box2d.ContactListener;
import com.badlogic.gdx.physics.box2d.Manifold;
import com.zallek.collide.base.BaseScene;
import com.zallek.collide.entity.Ball;
import com.zallek.collide.game.dialog.LevelCompleteWindow;
import com.zallek.collide.game.dialog.PauseDialog;
import com.zallek.collide.manager.ResourcesManager;
import com.zallek.collide.manager.SceneManager;
import com.zallek.collide.manager.SceneManager.SceneType;
import com.zallek.collide.util.constants.GameConstants;
import com.zallek.collide.util.constants.GameLevelConstants;
import com.zallek.collide.util.game.GameStateManagement;
import com.zallek.collide.util.score.Score;
import com.zallek.collide.scene.GameScene;

public class GameScene extends BaseScene implements GameStateManagement
{
    private HUD gameHUD;
	private PhysicsWorld physicsWorld;
	
	private LevelCompleteWindow levelCompleteWindow;
	private PauseDialog pauseDialog;
	
	private boolean started = false;
	private Text scoreText;
	private Score score;
	
	private CountText timeText;
	private int timeValue;

	@Override
    public void createScene()
    {
		score = new Score();
		setTouchAreaBindingOnActionDownEnabled(true);
	
		createBackground();
	    createHUD();
	    createPhysics();
	    
	    levelCompleteWindow = new LevelCompleteWindow(score, vbom);
	    pauseDialog = new PauseDialog(this, camera, vbom);
	    
		loadLevel(1);
	    start();
    }
	
    
    private void createPhysics()
    {
    	physicsWorld = new PhysicsWorld(new Vector2(0, 0), false);
        physicsWorld.setContactListener(setContactListener());
        registerUpdateHandler(physicsWorld);
    }

	@Override
	public void onBackKeyPressed()
	{
	    backToMenu();
	}

    @Override
    public SceneType getSceneType()
    {
        return SceneType.SCENE_GAME;
    }

    @Override
    public void disposeScene()
    {
    	camera.setHUD(null);
        camera.setCenter(camera.getWidth()/2, camera.getHeight()/2);
    }
    

    private void backToMenu(){
    	SceneManager.getInstance().loadMenuScene(engine);
    }
    
    
    //**** UI ****//
    
    private void createBackground()
    {
        setBackground(new Background(Color.BLACK));
    }
    
    private void createHUD()
    {
        gameHUD = new HUD();

        final float cam_h = GameConstants.CAMERA_HEIGHT;
        
        //ScoreText
        scoreText = new Text(110, cam_h-60, resourcesManager.font, "Score: 0123456789", new TextOptions(HorizontalAlign.LEFT), vbom); //String : all characters that will be used
        scoreText.setAnchorCenter(0, 0);    
        scoreText.setText("Score: 0");
        gameHUD.attachChild(scoreText);
        
        //Pause Button
        final ButtonSprite pause_button = new ButtonSprite(25, cam_h-24, ResourcesManager.getInstance().pause_button_region, vbom);
        pause_button.setOnClickListener(setPauseButtonListener());
        this.registerTouchArea(pause_button);
        gameHUD.attachChild(pause_button);
        
        //Reset Button
        final ButtonSprite reset_button = new ButtonSprite(75, cam_h-24, ResourcesManager.getInstance().reset_button_region, vbom);
        reset_button.setOnClickListener(setResetButtonListener());
        this.registerTouchArea(reset_button);
        gameHUD.attachChild(reset_button);
        
        camera.setHUD(gameHUD);
    }

    private void setScore(int score)
    {
        this.score.setScore(score);
        //activity.getResources().getText(R.string.score);
        scoreText.setText("Score: " + score);
    }
    
    private void displayTimeText()
    {
    	timeText = new CountText(0, 0, resourcesManager.font, timeValue, 0, new CountTextOptions(), vbom){
			@Override
			public void onFinished() {
				finish();
			}
        };
        timeText.setPosition(camera.getCenterX(), camera.getCenterY());
        timeText.setScale(4);
        attachChild(timeText);
    }
    
    
    //**** Level ****//
    
    private void loadLevel(int levelID)
    {
        final SimpleLevelLoader levelLoader = new SimpleLevelLoader(vbom);
        		
        levelLoader.registerEntityLoader(new EntityLoader<SimpleLevelEntityLoaderData>(GameLevelConstants.TAG_LEVEL)
        {
            public IEntity onLoadEntity(final String pEntityName, final IEntity pParent, final Attributes pAttributes, final SimpleLevelEntityLoaderData pSimpleLevelEntityLoaderData) throws IOException 
            {
                timeValue = SAXUtils.getIntAttributeOrThrow(pAttributes, GameLevelConstants.TAG_LEVEL_ATTRIBUTE_TIME);
                score.addCap(1, SAXUtils.getIntAttributeOrThrow(pAttributes, GameLevelConstants.TAG_LEVEL_ATTRIBUTE_STAR1CAP));
                score.addCap(2, SAXUtils.getIntAttributeOrThrow(pAttributes, GameLevelConstants.TAG_LEVEL_ATTRIBUTE_STAR2CAP));
                score.addCap(3, SAXUtils.getIntAttributeOrThrow(pAttributes, GameLevelConstants.TAG_LEVEL_ATTRIBUTE_STAR3CAP));
                
                return GameScene.this;
            }
        });
        
        levelLoader.registerEntityLoader(new EntityLoader<SimpleLevelEntityLoaderData>(GameLevelConstants.TAG_BALL)
        {
            public IEntity onLoadEntity(final String pEntityName, final IEntity pParent, final Attributes pAttributes, final SimpleLevelEntityLoaderData pSimpleLevelEntityLoaderData) throws IOException
            {
                final int x = SAXUtils.getIntAttributeOrThrow(pAttributes, GameLevelConstants.TAG_BALL_ATTRIBUTE_X);
                final int y = SAXUtils.getIntAttributeOrThrow(pAttributes, GameLevelConstants.TAG_BALL_ATTRIBUTE_Y);
                
                final String colorString = SAXUtils.getAttributeOrThrow(pAttributes, GameLevelConstants.TAG_BALL_ATTRIBUTE_COLOR);
                final int color = android.graphics.Color.parseColor(colorString);
                
                final float velocity = SAXUtils.getFloatAttributeOrThrow(pAttributes, GameLevelConstants.TAG_BALL_ATTRIBUTE_VELOCITY);
                final float direction = SAXUtils.getFloatAttributeOrThrow(pAttributes, GameLevelConstants.TAG_BALL_ATTRIBUTE_DIRECTION);
                
                Ball ball = new Ball(x, y, color, GameScene.this, physicsWorld){
					@Override
					public void onChanged() {
						calculateScore();
					}
                };
                ball.setVelocityAndDirection(velocity, direction);
                ball.pause();
                
                return ball;
            }
        });

        //try {
        	levelLoader.loadLevelFromAsset(activity.getAssets(), "level/" + levelID + ".lvl");
        /*}
        catch(LevelLoaderException e){
        	Debug.e(e);
        	//TODO Display erreur chargement et debugger
        	backToMenu();
        }*/
    }
    
    
    //**** Listeners ****//
    
    private OnClickListener setPauseButtonListener() {
    	return new OnClickListener(){
    		@Override
    		public void onClick(ButtonSprite pButtonSprite, float pTouchAreaLocalX, float pTouchAreaLocalY) {
    			if(started){
    				pauseDialog.display();
    			}
    		}
        };
    }
    
    private OnClickListener setResetButtonListener() {
    	return new OnClickListener(){
    		@Override
    		public void onClick(ButtonSprite pButtonSprite, float pTouchAreaLocalX, float pTouchAreaLocalY) {
    			reset();
    		}
        };
    }

    private ContactListener setContactListener()
    {
        ContactListener contactListener = new ContactListener()
        {
            public void beginContact(Contact contact)
            {
                final Object x1 = contact.getFixtureA().getBody().getUserData();
	            final Object x2 = contact.getFixtureB().getBody().getUserData();
	            if(x1 != null && x2 != null){
	            	if(x1 instanceof Ball && x2 instanceof Ball){
		            	Ball.ballCollision((Ball) x1, (Ball) x2);
		            }
	            }
            }

            public void endContact(Contact contact)
            {
                
            }

			@Override
			public void preSolve(Contact contact, Manifold oldManifold) 
			{
				
			}

			@Override
			public void postSolve(Contact contact, ContactImpulse impulse) 
			{
				
			}
        };
        return contactListener;
    }
    
    
    //**** Game activity management ****//
    
    public void start() {
    	displayTimeText();
    	
    	final float wait_time = 2;
    	final float transition_time = 1;
    	
    	engine.registerUpdateHandler(new TimerHandler(wait_time, new ITimerCallback() 
    	{
    		public void onTimePassed(final TimerHandler pTimerHandler) 
    		{
    			timeText.registerEntityModifier(new ScaleModifier(transition_time, 4, 1));
    			timeText.registerEntityModifier(new MoveModifier(transition_time, camera.getCenterX(), camera.getCenterY(), GameConstants.CAMERA_WIDTH - 50, GameConstants.CAMERA_HEIGHT - 30));
    			engine.registerUpdateHandler(new TimerHandler(transition_time, new ITimerCallback() 
    	    	{
    	    		public void onTimePassed(final TimerHandler pTimerHandler) 
    	    		{
		    			timeText.start();
		    			resume();
		    			started = true;
    	    		}
    	    	}));
    		}
    	}));
    }
    
    //TODO Doit bloquer l'action sur les balls et boutons HUD aussi
    public void pause() {
    	for(Ball b : Ball.getBallsList()){
    		b.pause();
    	}
    	timeText.pause();
    }

    public void resume() {
    	for(Ball b : Ball.getBallsList()){
			b.resume();
		}
    	timeText.resume();
    }
    
    public void reset() {
    	
    }
    
    public void finish() 
    {
    	levelCompleteWindow.display(this, camera);
        camera.getHUD().setVisible(false);
        timeText.setVisible(false);
        
        setIgnoreUpdate(true);
    	pause();
    }
    
    
    //**** Utils ****//
    
    private void calculateScore() {
    	int newScore = 0;
		for(Ball b : Ball.getBallsList()){
			newScore += Math.pow(b.getSize(), 1.5);
		}
		newScore = Math.round(newScore);

		setScore(newScore);
		finishIfNoBall();
    }
    
    private void finishIfNoBall() {
    	if(Ball.getBallsList().isEmpty()){
    		finish();
    	}
    }


	@Override
	public void onRestart() {
	
	}
    
}
